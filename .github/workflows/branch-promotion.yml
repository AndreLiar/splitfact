name: Branch Promotion Pipeline

on:
  push:
    branches: [dev]
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch for promotion'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - main

jobs:
  promote-to-staging:
    name: Auto-promote dev to staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx prisma generate

      - name: Run full validation
        run: |
          npm run lint
          npm run test:ci
          npm run build
          npm run pwa:validate

      - name: Promote to staging
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout staging
          git merge dev --no-ff -m "Auto-promote: dev â†’ staging [skip ci]"
          git push origin staging

  manual-promotion:
    name: Manual branch promotion
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx prisma generate

      - name: Run comprehensive validation
        run: |
          echo "::group::Code Quality"
          npm run lint
          npx tsc --noEmit
          echo "::endgroup::"
          
          echo "::group::Security"
          npm audit --audit-level=high
          echo "::endgroup::"
          
          echo "::group::Testing"
          npm run test:ci
          npm run test:api
          echo "::endgroup::"
          
          echo "::group::Build & PWA"
          npm run build
          npm run pwa:validate
          echo "::endgroup::"

      - name: E2E Testing (Production-like)
        if: github.event.inputs.target_branch == 'main'
        run: |
          npm run test:e2e

      - name: Promote staging to main
        if: github.event.inputs.target_branch == 'main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout main
          git merge staging --no-ff -m "Production release: staging â†’ main"
          git tag -a "v$(date +%Y%m%d-%H%M%S)" -m "Production release $(date)"
          git push origin main --tags

      - name: Create Release Notes
        if: github.event.inputs.target_branch == 'main'
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const lastTag = execSync('git describe --tags --abbrev=0 HEAD~1', { encoding: 'utf8' }).trim();
            const commits = execSync(`git log ${lastTag}..HEAD --pretty=format:"- %s (%h)"`, { encoding: 'utf8' });
            
            const releaseNotes = `## ðŸš€ Production Release
            
            ### Changes:
            ${commits}
            
            ### Validation Passed:
            - âœ… Code Quality (ESLint + TypeScript)
            - âœ… Security Scanning
            - âœ… Unit & Integration Tests
            - âœ… API Tests
            - âœ… E2E Tests
            - âœ… Build & PWA Validation
            
            **Deployed to:** https://splitfact-app.vercel.app`;
            
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: execSync('git describe --tags --abbrev=0', { encoding: 'utf8' }).trim(),
              name: `Release ${new Date().toISOString().slice(0, 10)}`,
              body: releaseNotes,
              draft: false,
              prerelease: false
            });